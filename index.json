[{"categories":[],"content":"宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。” 现给出一批考生的德才分数，请根据司马光的理论给出录取排名。 ","date":"2023-08-16 16:46:38","objectID":"https://Nicholas-FYW.github.io/1015-%E5%BE%B7%E6%89%8D%E8%AE%BA/:0:0","tags":[],"title":"1015 德才论","uri":"https://Nicholas-FYW.github.io/1015-%E5%BE%B7%E6%89%8D%E8%AE%BA/"},{"categories":[],"content":"输入格式： 输入第一行给出 3 个正整数，分别为：N（≤105），即考生总数；L（≥60），为录取最低分数线，即德分和才分均不低于 L 的考生才有资格被考虑录取；H（\u003c100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到优先录取线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 H，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 L 的考生也按总分排序，但排在第三类考生之后。 随后 N 行，每行给出一位考生的信息，包括：准考证号 德分 才分，其中准考证号为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。 ","date":"2023-08-16 16:46:38","objectID":"https://Nicholas-FYW.github.io/1015-%E5%BE%B7%E6%89%8D%E8%AE%BA/:0:1","tags":[],"title":"1015 德才论","uri":"https://Nicholas-FYW.github.io/1015-%E5%BE%B7%E6%89%8D%E8%AE%BA/"},{"categories":[],"content":"输出格式： 输出第一行首先给出达到最低分数线的考生人数 M，随后 M 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。 ","date":"2023-08-16 16:46:38","objectID":"https://Nicholas-FYW.github.io/1015-%E5%BE%B7%E6%89%8D%E8%AE%BA/:0:2","tags":[],"title":"1015 德才论","uri":"https://Nicholas-FYW.github.io/1015-%E5%BE%B7%E6%89%8D%E8%AE%BA/"},{"categories":[],"content":"输入样例： 14 60 80 10000001 64 90 10000002 90 60 10000011 85 80 10000003 85 80 10000004 80 85 10000005 82 77 10000006 83 76 10000007 90 78 10000008 75 79 10000009 59 90 10000010 88 45 10000012 80 100 10000013 90 99 10000014 66 60 ","date":"2023-08-16 16:46:38","objectID":"https://Nicholas-FYW.github.io/1015-%E5%BE%B7%E6%89%8D%E8%AE%BA/:0:3","tags":[],"title":"1015 德才论","uri":"https://Nicholas-FYW.github.io/1015-%E5%BE%B7%E6%89%8D%E8%AE%BA/"},{"categories":[],"content":"输出样例： 12 10000013 90 99 10000012 80 100 10000003 85 80 10000011 85 80 10000004 80 85 10000007 90 78 10000006 83 76 10000005 82 77 10000002 90 60 10000014 66 60 10000008 75 79 10000001 64 90 ","date":"2023-08-16 16:46:38","objectID":"https://Nicholas-FYW.github.io/1015-%E5%BE%B7%E6%89%8D%E8%AE%BA/:0:4","tags":[],"title":"1015 德才论","uri":"https://Nicholas-FYW.github.io/1015-%E5%BE%B7%E6%89%8D%E8%AE%BA/"},{"categories":[],"content":"思路 首先对第一种情况进行判断，当不满足时再对第二种情况进行判断 //坏情况 bool cmp(inf a, inf b) { if (a.flag == b.flag) { int sum1, sum2; sum1 = a.virtue + a.talent; sum2 = b.virtue + b.virtue; if (sum1 == sum2) { if (a.virtue == b.virtue) return strcmp(a.num, b.num) \u003c 0; return a.virtue \u003e b.virtue; } return sum1 \u003e sum2; } return a.flag \u003e b.flag; } #include \u003ciostream\u003e#include \u003calgorithm\u003e#include \u003ccstring\u003e#include \u003cvector\u003eusing namespace std; /* 使用一个结构体来存储考生的信息，使用flag来存储考生的分类， 当对学生进行排序的时候，首先判断按照分类进行排序，同一分类 里面按照的是总分进行排序。 */ struct inf { char num[20]; int virtue; int talent; int flag; }; bool cmp(inf a, inf b) { int sum1 = a.virtue + a.talent, sum2 = b.virtue + b.talent; if (a.flag != b.flag) return a.flag \u003c b.flag; else if (sum1 != sum2) return sum1 \u003e sum2; else if (a.virtue != b.virtue) return a.virtue \u003e b.virtue; return strcmp(a.num, b.num) \u003c 0; } int main() { int n, l, h; inf *data = new inf[100005]; scanf(\"%d%d%d\", \u0026n, \u0026l, \u0026h); int count = n; for (int i = 0; i \u003c n; i++) { scanf(\"%s%d%d\", data[i].num, \u0026data[i].virtue, \u0026data[i].talent); if (data[i].virtue \u003c l || data[i].talent \u003c l) { data[i].flag = 0; count--; } else if (data[i].virtue \u003e= h \u0026\u0026 data[i].talent \u003e= h) { data[i].flag = 1; } else if (data[i].virtue \u003e= h \u0026\u0026 data[i].talent \u003c h) { data[i].flag = 2; } else if (data[i].virtue \u003c h \u0026\u0026 data[i].talent \u003c h \u0026\u0026 data[i].virtue \u003e= data[i].talent) { data[i].flag = 3; } else { data[i].flag = 4; } } sort(data, data + n, cmp); printf(\"%d\\n\", count); for (int i = 0; i \u003c n; i++) { if (!data[i].flag) continue; printf(\"%s %d %d\", data[i].num, data[i].virtue, data[i].talent); if (i != n - 1) printf(\"\\n\"); } delete[] data; return 0; } ","date":"2023-08-16 16:46:38","objectID":"https://Nicholas-FYW.github.io/1015-%E5%BE%B7%E6%89%8D%E8%AE%BA/:0:5","tags":[],"title":"1015 德才论","uri":"https://Nicholas-FYW.github.io/1015-%E5%BE%B7%E6%89%8D%E8%AE%BA/"},{"categories":[],"content":"题目描述 输入10个整数，彼此以空格分隔。重新排序以后输出(也按空格分隔)，要求: 1.先输出其中的奇数,并按从大到小排列； 2.然后输出其中的偶数,并按从小到大排列。 输入 任意排序的10个整数（0～100），彼此以空格分隔。 输出 可能有多组测试数据，对于每组数据，按照要求排序后输出，由空格分隔。 思路 使用双指针，分别对奇数和偶数进行划分，然后分别对奇数和偶数进行排序 代码 #include \u003ciostream\u003e#include \u003calgorithm\u003e#include \u003cvector\u003eusing namespace std; int main() { int n; vector\u003cint\u003e num(10); while (cin \u003e\u003e num[0]) { for (int i = 1; i \u003c= 9; i++) { cin \u003e\u003e num[i]; } int i = 0, j = 9; while (i \u003c j) { //每次结束排序时i指向的是一个奇数，j指向的是一个偶数，最后结束是i=j，因此i指向的是一个偶数 while (i \u003c j \u0026\u0026 num[i] % 2 != 0) { i++; } while (i \u003c j \u0026\u0026 num[i] % 2 != 0) { j--; } swap(num[i], num[j]); } sort(num.begin(), num.begin() + i); reverse(num.begin(), num.begin() + i); sort(num.begin() + i, num.end()); for (int i = 0; i \u003c 10; i++) { printf(\"%d \", num[i]); } printf(\"\\n\"); } return 0; } ","date":"2023-08-10 15:05:55","objectID":"https://Nicholas-FYW.github.io/%E9%97%AE%E9%A2%98h%E6%95%B4%E6%95%B0%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F/:0:0","tags":[],"title":"问题 H 整数奇偶排序","uri":"https://Nicholas-FYW.github.io/%E9%97%AE%E9%A2%98h%E6%95%B4%E6%95%B0%E5%A5%87%E5%81%B6%E6%8E%92%E5%BA%8F/"},{"categories":[],"content":"Given an integer with no more than 9 digits, you are supposed to read it in the traditional Chinese way. Output Fu first if it is negative. For example, -123456789 is read as Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu. Note: zero (ling) must be handled correctly according to the Chinese tradition. For example, 100800 is yi Shi Wan ling ba Bai. ","date":"2023-08-07 16:22:58","objectID":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/:0:0","tags":[],"title":"1082 Read Number in Chinese","uri":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/"},{"categories":[],"content":"Input Specification: Each input file contains one test case, which gives an integer with no more than 9 digits. ","date":"2023-08-07 16:22:58","objectID":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/:0:1","tags":[],"title":"1082 Read Number in Chinese","uri":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/"},{"categories":[],"content":"Output Specification: For each test case, print in a line the Chinese way of reading the number. The characters are separated by a space and there must be no extra space at the end of the line. ","date":"2023-08-07 16:22:58","objectID":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/:0:2","tags":[],"title":"1082 Read Number in Chinese","uri":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/"},{"categories":[],"content":"Sample Input 1: -123456789 ","date":"2023-08-07 16:22:58","objectID":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/:0:3","tags":[],"title":"1082 Read Number in Chinese","uri":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/"},{"categories":[],"content":"Sample Output 1: Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu ","date":"2023-08-07 16:22:58","objectID":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/:0:4","tags":[],"title":"1082 Read Number in Chinese","uri":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/"},{"categories":[],"content":"Sample Input 2: 100800 ","date":"2023-08-07 16:22:58","objectID":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/:0:5","tags":[],"title":"1082 Read Number in Chinese","uri":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/"},{"categories":[],"content":"Sample Output 2: yi Shi Wan ling ba Bai ","date":"2023-08-07 16:22:58","objectID":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/:0:6","tags":[],"title":"1082 Read Number in Chinese","uri":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/"},{"categories":[],"content":"思路 分情况讨论：要做到不重不漏 A\u0026\u0026B一共会出现四种情况 A：T B：T A：T B：F A：F B：T A：F B：F 使用两个数组分别去存储数字的汉字和单位 为了保证按照格式输出首先输出最高位，然后再空格输出下一位 输出接下来的数字时，当数字不为零时，输出它的数字和单位 当数字为零时：数字所在单位代表的进制:如果数字所在单位的所有位不全为 零，输出进制 零的输出:只要零后面还有零就需要输出零，连续的零只需要输出一个零 #include \u003ciostream\u003eusing namespace std; /* 分情况讨论：要做到不重不漏 A\u0026\u0026B一共会出现四种情况 A：T B：T A：T B：F A：F B：T A：F B：F 使用两个数组分别去存储数字的汉字和单位 为了保证按照格式输出首先输出最高位，然后再空格输出下一位 输出接下来的数字时，当数字不为零时，输出它的数字和单位 当数字为零时：数字所在单位代表的进制:如果数字所在单位的所有位不全为零，输出进制 零的输出:只要零后面还有零就需要输出零，连续的零只需要输出一个零*/ int main() { int n; string arr1[10] = { \"ling\", \"yi\", \"er\", \"san\", \"si\", \"wu\", \"liu\", \"qi\", \"ba\", \"jiu\"}; string arr2[9] = {\"\", \"Shi\", \"Bai\", \"Qian\", \"Wan\", \"Shi\", \"Bai\", \"Qian\", \"Yi\"}; while (scanf(\"%d\", \u0026n) != EOF) { int flag = 0; if (n \u003c 0) { n = -n; flag = 1; } int num[20], index = 0; do { num[index++] = n % 10; n = n / 10; } while (n != 0); if (flag) printf(\"Fu \"); printf(\"%s\", arr1[num[index - 1]].c_str()); if (index != 1) printf(\" %s\", arr2[index - 1].c_str()); int flag1 = 0, count = 0; for (int i = index - 2; i \u003e= 0; i--) { if (num[i] == 0) { flag1 = 1; count++; //万进制的输出，描述不太准确：只要万进制的位不全为零，就要输出万 if (i == 4) printf(\" %s\", arr2[i].c_str()); continue; } if (flag1) { printf(\" ling\"); flag1 = 0; count = 0; } printf(\" %s\", arr1[num[i]].c_str()); if (i != 0) printf(\" %s\", arr2[i].c_str()); } } return 0; } ","date":"2023-08-07 16:22:58","objectID":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/:0:7","tags":[],"title":"1082 Read Number in Chinese","uri":"https://Nicholas-FYW.github.io/1082-read-number-in-chinese/"},{"categories":[],"content":"1048 数字加密 本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。 ","date":"2023-08-07 16:22:54","objectID":"https://Nicholas-FYW.github.io/1048-%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/:0:0","tags":[],"title":"1048 数字加密","uri":"https://Nicholas-FYW.github.io/1048-%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/"},{"categories":[],"content":"输入格式： 输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。 ","date":"2023-08-07 16:22:54","objectID":"https://Nicholas-FYW.github.io/1048-%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/:0:1","tags":[],"title":"1048 数字加密","uri":"https://Nicholas-FYW.github.io/1048-%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/"},{"categories":[],"content":"输出格式： 在一行中输出加密后的结果。 ","date":"2023-08-07 16:22:54","objectID":"https://Nicholas-FYW.github.io/1048-%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/:0:2","tags":[],"title":"1048 数字加密","uri":"https://Nicholas-FYW.github.io/1048-%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/"},{"categories":[],"content":"输入样例： 1234567 368782971 ","date":"2023-08-07 16:22:54","objectID":"https://Nicholas-FYW.github.io/1048-%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/:0:3","tags":[],"title":"1048 数字加密","uri":"https://Nicholas-FYW.github.io/1048-%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/"},{"categories":[],"content":"输出样例： 3695Q8118 ","date":"2023-08-07 16:22:54","objectID":"https://Nicholas-FYW.github.io/1048-%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/:0:4","tags":[],"title":"1048 数字加密","uri":"https://Nicholas-FYW.github.io/1048-%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/"},{"categories":[],"content":"思路 将A、B进行reverse，然后再进行加密 首先取A、B里面的长度较小值，然后进行对应位加密 最后倒序输出 #include \u003ciostream\u003e#include \u003calgorithm\u003eusing namespace std; /* 将A、B进行reverse，然后再进行加密 首先取A、B里面的长度较小值，然后进行对应位加密 最后倒序输出 */ int main() { string a, b; char arr[13] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'J', 'Q', 'K'}; while (cin \u003e\u003e a \u003e\u003e b) { reverse(a.begin(), a.end()); reverse(b.begin(), b.end()); int len = min(a.size(), b.size()); int num[1005]; for (int i = 0; i \u003c len; i++) { if ((i + 1) % 2 != 0) { num[i] = ((b[i] - '0') + (a[i] - '0')) % 13; } else { num[i] = (b[i] - '0') - (a[i] - '0'); if (num[i] \u003c 0) num[i] += 10; } } int l = max(a.size(), b.size()); if (a.size() \u003e b.size()) { for (int j = len; j \u003c l; j++) { if ((j + 1) % 2 != 0) { num[j] = (a[j] - '0') % 13; } else { num[j] = 0 - (a[j] - '0'); if (num[j] \u003c 0) num[j] += 10; } } } else { for (int j = len; j \u003c l; j++) { if ((j + 1) % 2 != 0) { num[j] = (b[j] - '0') % 13; } else { num[j] = b[j] - '0'; } } } for (int i = l - 1; i \u003e= 0; i--) { printf(\"%c\", arr[num[i]]); } } return 0; } ","date":"2023-08-07 16:22:54","objectID":"https://Nicholas-FYW.github.io/1048-%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/:0:5","tags":[],"title":"1048 数字加密","uri":"https://Nicholas-FYW.github.io/1048-%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/"},{"categories":[],"content":"The Japanese language is notorious for its sentence ending particles. Personal preference of such particles can be considered as a reflection of the speaker’s personality. Such a preference is called “Kuchiguse” and is often exaggerated artistically in Anime and Manga. For example, the artificial sentence ending particle “nyan~” is often used as a stereotype for characters with a cat-like personality: Itai nyan~ (It hurts, nyan~) Ninjin wa iyada nyan~ (I hate carrots, nyan~) Now given a few lines spoken by the same character, can you find her Kuchiguse? ","date":"2023-08-06 18:23:57","objectID":"https://Nicholas-FYW.github.io/1077-kuchiguse/:0:0","tags":[],"title":"2","uri":"https://Nicholas-FYW.github.io/1077-kuchiguse/"},{"categories":[],"content":"Input Specification: Each input file contains one test case. For each case, the first line is an integer N (2≤N≤100). Following are N file lines of 0~256 (inclusive) characters in length, each representing a character’s spoken line. The spoken lines are case sensitive. ","date":"2023-08-06 18:23:57","objectID":"https://Nicholas-FYW.github.io/1077-kuchiguse/:0:1","tags":[],"title":"2","uri":"https://Nicholas-FYW.github.io/1077-kuchiguse/"},{"categories":[],"content":"Output Specification: For each test case, print in one line the kuchiguse of the character, i.e., the longest common suffix of all N lines. If there is no such suffix, write nai. ","date":"2023-08-06 18:23:57","objectID":"https://Nicholas-FYW.github.io/1077-kuchiguse/:0:2","tags":[],"title":"2","uri":"https://Nicholas-FYW.github.io/1077-kuchiguse/"},{"categories":[],"content":"Sample Input 1: 3 Itai nyan~ Ninjin wa iyadanyan~ uhhh nyan~ ","date":"2023-08-06 18:23:57","objectID":"https://Nicholas-FYW.github.io/1077-kuchiguse/:0:3","tags":[],"title":"2","uri":"https://Nicholas-FYW.github.io/1077-kuchiguse/"},{"categories":[],"content":"Sample Output 1: nyan~ ","date":"2023-08-06 18:23:57","objectID":"https://Nicholas-FYW.github.io/1077-kuchiguse/:0:4","tags":[],"title":"2","uri":"https://Nicholas-FYW.github.io/1077-kuchiguse/"},{"categories":[],"content":"Sample Input 2: 3 Itai! Ninjinnwaiyada T_T T_T ","date":"2023-08-06 18:23:57","objectID":"https://Nicholas-FYW.github.io/1077-kuchiguse/:0:5","tags":[],"title":"2","uri":"https://Nicholas-FYW.github.io/1077-kuchiguse/"},{"categories":[],"content":"Sample Output 2: nai ","date":"2023-08-06 18:23:57","objectID":"https://Nicholas-FYW.github.io/1077-kuchiguse/:0:6","tags":[],"title":"2","uri":"https://Nicholas-FYW.github.io/1077-kuchiguse/"},{"categories":[],"content":"思路 使用字符串进行输入的时候空格会结束输入 寻找最长后缀匹配不太方便，我们可以对它进行变换 转变为寻找最长前缀匹配 首先，对所有的字符串进行reverse 然后再将第一个字符串的每个单词和其他所有的字符串进行比较， 发现出现不一样的单词就停止进行比对 #include \u003ciostream\u003e #include \u003calgorithm\u003e using namespace std; /* 使用字符串进行输入的时候空格会结束输入 寻找最长后缀匹配不太方便，我们可以对它进行变换 转变为寻找最长前缀匹配 首先，对所有的字符串进行reverse 然后再将第一个字符串的每个单词和其他所有的字符串进行比较， 发现出现不一样的单词就停止进行比对 */ int main() { int n; string sen[1005]; while (scanf(\"%d\", \u0026n) != EOF) { getchar(); for (int i = 0; i \u003c n; i++) { getline(cin, sen[i]); reverse(sen[i].begin(), sen[i].end()); } int len = sen[0].size(), flag = 0, index = 0; for (int i = 0; i \u003c len; i++) { char c = sen[0][i]; for (int j = 1; j \u003c n; j++) { if (sen[j][i] != c) { flag = 1; break; } } if (flag) { index = i - 1; break; } } if (index \u003c 0) { printf(\"nai\"); } else { for (int i = index; i \u003e= 0; i--) { printf(\"%c\", sen[0][i]); } } printf(\"\\n\"); } return 0; } ","date":"2023-08-06 18:23:57","objectID":"https://Nicholas-FYW.github.io/1077-kuchiguse/:0:7","tags":[],"title":"2","uri":"https://Nicholas-FYW.github.io/1077-kuchiguse/"},{"categories":[],"content":"给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。 ","date":"2023-08-05 10:23:58","objectID":"https://Nicholas-FYW.github.io/1009-%E8%AF%B4%E5%8F%8D%E8%AF%9D/:0:0","tags":[],"title":"1009 说反话","uri":"https://Nicholas-FYW.github.io/1009-%E8%AF%B4%E5%8F%8D%E8%AF%9D/"},{"categories":[],"content":"输入格式： 测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。 ","date":"2023-08-05 10:23:58","objectID":"https://Nicholas-FYW.github.io/1009-%E8%AF%B4%E5%8F%8D%E8%AF%9D/:0:1","tags":[],"title":"1009 说反话","uri":"https://Nicholas-FYW.github.io/1009-%E8%AF%B4%E5%8F%8D%E8%AF%9D/"},{"categories":[],"content":"输出格式： 每个测试用例的输出占一行，输出倒序后的句子。 ","date":"2023-08-05 10:23:58","objectID":"https://Nicholas-FYW.github.io/1009-%E8%AF%B4%E5%8F%8D%E8%AF%9D/:0:2","tags":[],"title":"1009 说反话","uri":"https://Nicholas-FYW.github.io/1009-%E8%AF%B4%E5%8F%8D%E8%AF%9D/"},{"categories":[],"content":"输入样例： Hello World Here I Come ","date":"2023-08-05 10:23:58","objectID":"https://Nicholas-FYW.github.io/1009-%E8%AF%B4%E5%8F%8D%E8%AF%9D/:0:3","tags":[],"title":"1009 说反话","uri":"https://Nicholas-FYW.github.io/1009-%E8%AF%B4%E5%8F%8D%E8%AF%9D/"},{"categories":[],"content":"输出样例： Come I Here World Hello ","date":"2023-08-05 10:23:58","objectID":"https://Nicholas-FYW.github.io/1009-%E8%AF%B4%E5%8F%8D%E8%AF%9D/:0:4","tags":[],"title":"1009 说反话","uri":"https://Nicholas-FYW.github.io/1009-%E8%AF%B4%E5%8F%8D%E8%AF%9D/"},{"categories":[],"content":"思路 首先使用一个字符串来接受每个单词，然后再使用一个数组来接受所有的单词，随后把句子倒序输出。 #include \u003ciostream\u003eusing namespace std; /* 用一个字符串接受输入的每个单词 然后使用一个字符串数组接受输入的每个单词 */ int main() { string s, arr[10005]; int num; while (cin \u003e\u003e s) arr[num++] = s; cout \u003c\u003c arr[num - 1]; for (int i = num - 2; i \u003e= 0; i--) { cout \u003c\u003c \" \" \u003c\u003c arr[i]; } return 0; } ","date":"2023-08-05 10:23:58","objectID":"https://Nicholas-FYW.github.io/1009-%E8%AF%B4%E5%8F%8D%E8%AF%9D/:0:5","tags":[],"title":"1009 说反话","uri":"https://Nicholas-FYW.github.io/1009-%E8%AF%B4%E5%8F%8D%E8%AF%9D/"},{"categories":[],"content":"题目描述 给定一个短字符串（不含空格），再给定若干字符串，在这些字符串中删除所含有的短字符串。 输入 输入只有1组数据。 输入一个短字符串（不含空格），再输入若干字符串直到文件结束为止。 输出 删除输入的短字符串(不区分大小写)并去掉空格,输出。 思路 利用string的find，earse进行操作，使用string一行一行进行接收，然后再进行处理，要求不区分大小写进行删除处理，我们可以把输入的string和短字符串全都变成小写，然后再把string和短字符串进行对比，同时将string的值进行复制，对复制后的值进行和小写的值做同样的处理。 首先先把string全部变成小写，然后再把string和短字符串进行对比，对string和复制后的字符串进行相同的处理，最后对string和复制后的字符串进行去掉空格的处理。 find(字符串， 起始位) erase(起始位， 大小) #include \u003ciostream\u003e#include \u003ccstring\u003eusing namespace std; int main() { string t; getline(cin, t); int len = t.size(); for (int i = 0; i \u003c len; i++) { t[i] = tolower(t[i]); } string s1, s2; while (getline(cin, s1)) { s2 = s1; int l = s1.size(); // turn string to lowcase for (int i = 0; i \u003c l; i++) { s1[i] = tolower(s1[i]); } int tmp = s1.find(t, 0); // del the short string while (tmp != string::npos) { s1.erase(tmp, len); s2.erase(tmp, len); tmp = s1.find(t, tmp); } tmp = s1.find(\" \", 0); // del spaces while (tmp != string::npos) { s1.erase(tmp, 1); s2.erase(tmp, 1); tmp = s1.find(\" \", tmp); } cout \u003c\u003c s2 \u003c\u003c endl; } return 0; } ","date":"2023-07-31 10:31:38","objectID":"https://Nicholas-FYW.github.io/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9F%A5%E6%89%BE%E5%88%A0%E9%99%A4/:0:0","tags":[],"title":"字符串的查找删除","uri":"https://Nicholas-FYW.github.io/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9F%A5%E6%89%BE%E5%88%A0%E9%99%A4/"},{"categories":[],"content":"test picture location ","date":"2023-03-04 14:48:37","objectID":"https://Nicholas-FYW.github.io/picturetest/:0:0","tags":[],"title":"PictureTest","uri":"https://Nicholas-FYW.github.io/picturetest/"},{"categories":["cat1"],"content":"新建 ","date":"2021-03-27 21:56:51","objectID":"https://Nicholas-FYW.github.io/test1/:0:0","tags":["tag1","tag2"],"title":"Test1","uri":"https://Nicholas-FYW.github.io/test1/"},{"categories":[],"content":"新建 ","date":"2021-03-27 21:56:20","objectID":"https://Nicholas-FYW.github.io/about/:0:0","tags":[],"title":"About","uri":"https://Nicholas-FYW.github.io/about/"},{"categories":null,"content":"1082 Read Number in Chinese 通过了测试，程序不完善 ","date":"0001-01-01 00:00:00","objectID":"https://Nicholas-FYW.github.io/inf/:1:0","tags":null,"title":"","uri":"https://Nicholas-FYW.github.io/inf/"}]
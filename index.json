[{"categories":[],"content":"题目描述 给定一个短字符串（不含空格），再给定若干字符串，在这些字符串中删除所含有的短字符串。 输入 输入只有1组数据。 输入一个短字符串（不含空格），再输入若干字符串直到文件结束为止。 输出 删除输入的短字符串(不区分大小写)并去掉空格,输出。 思路 利用string的find，earse进行操作，使用string一行一行进行接收，然后再进行处理，要求不区分大小写进行删除处理，我们可以把输入的string和短字符串全都变成小写，然后再把string和短字符串进行对比，同时将string的值进行复制，对复制后的值进行和小写的值做同样的处理。 首先先把string全部变成小写，然后再把string和短字符串进行对比，对string和复制后的字符串进行相同的处理，最后对string和复制后的字符串进行去掉空格的处理。 find(字符串， 起始位) erase(起始位， 大小) #include \u003ciostream\u003e#include \u003ccstring\u003eusing namespace std; int main() { string t; getline(cin, t); int len = t.size(); for (int i = 0; i \u003c len; i++) { t[i] = tolower(t[i]); } string s1, s2; while (getline(cin, s1)) { s2 = s1; int l = s1.size(); // turn string to lowcase for (int i = 0; i \u003c l; i++) { s1[i] = tolower(s1[i]); } int tmp = s1.find(t, 0); // del the short string while (tmp != string::npos) { s1.erase(tmp, len); s2.erase(tmp, len); tmp = s1.find(t, tmp); } tmp = s1.find(\" \", 0); // del spaces while (tmp != string::npos) { s1.erase(tmp, 1); s2.erase(tmp, 1); tmp = s1.find(\" \", tmp); } cout \u003c\u003c s2 \u003c\u003c endl; } return 0; } ","date":"2023-07-31 10:31:38","objectID":"https://Nicholas-FYW.github.io/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9F%A5%E6%89%BE%E5%88%A0%E9%99%A4/:0:0","tags":[],"title":"字符串的查找删除","uri":"https://Nicholas-FYW.github.io/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9F%A5%E6%89%BE%E5%88%A0%E9%99%A4/"},{"categories":[],"content":"test picture location ","date":"2023-03-04 14:48:37","objectID":"https://Nicholas-FYW.github.io/picturetest/:0:0","tags":[],"title":"PictureTest","uri":"https://Nicholas-FYW.github.io/picturetest/"},{"categories":["cat1"],"content":"新建 ","date":"2021-03-27 21:56:51","objectID":"https://Nicholas-FYW.github.io/test1/:0:0","tags":["tag1","tag2"],"title":"Test1","uri":"https://Nicholas-FYW.github.io/test1/"},{"categories":[],"content":"新建 ","date":"2021-03-27 21:56:20","objectID":"https://Nicholas-FYW.github.io/about/:0:0","tags":[],"title":"About","uri":"https://Nicholas-FYW.github.io/about/"}]